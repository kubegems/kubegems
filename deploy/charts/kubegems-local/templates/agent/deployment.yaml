apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ include "kubegems-local.agent.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: agent
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.agent.replicaCount }}
  {{- if .Values.agent.updateStrategy }}
  strategy: {{- toYaml .Values.agent.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: agent
  template:
    metadata:
      {{- if .Values.agent.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.agent.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: agent
        {{- if .Values.agent.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.agent.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ template "kubegems-local.agent.serviceAccountName" . }}
      {{- include "kubegems-local.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.agent.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.agent.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.agent.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.agent.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.agent.podAffinityPreset "component" "agent" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.agent.podAntiAffinityPreset "component" "agent" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.agent.nodeAffinityPreset.type "key" .Values.agent.nodeAffinityPreset.key "values" .Values.agent.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.agent.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.agent.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.agent.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.agent.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.agent.priorityClassName }}
      priorityClassName: {{ .Values.agent.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.agent.schedulerName }}
      schedulerName: {{ .Values.agent.schedulerName | quote }}
      {{- end }}
      {{- if .Values.agent.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.agent.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      containers:
        - name: agent
          image: {{ include "kubegems-local.agent.image" . }}
          imagePullPolicy: {{ .Values.agent.image.pullPolicy }}
          {{- if .Values.agent.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.agent.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.agent.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.agent.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.agent.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.agent.args "context" $) | nindent 12 }}
          {{- else }}
          args:
            - agent
            - --system-listen=:{{ .Values.agent.containerPorts.http }}
            - --debug-podselector="app.kubernetes.io/component=kubectl,app.kubernetes.io/name={{ include "common.names.fullname" . }}"
            {{- if .Values.agent.tls.enabled }}
            - --system-cafile=/certs/ca.crt
            - --system-certfile=/certs/tls.crt
            - --system-keyfile=/certs/tls.key
            {{- end }}
            {{- if .Values.agent.httpSignature.enabled }}
            - --api-enablehttpsigs
            {{- end}}
            {{- if .Values.agent.metrics.enabled }}
            # todo: metrics args here
            {{- end }}
            {{- if .Values.agent.extraArgs }}
            {{- include "common.tplvalues.render" (dict "value" .Values.agent.extraArgs "context" $) | nindent 12 }}
            {{- end }}
          {{- end }}
          env:
            - name: MY_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: KUBEGEMS_DEBUG
              value: {{ ternary "true" "false" (or .Values.agent.image.debug ) | quote }}
            - name: LOG_LEVEL
              value: {{ .Values.agent.logLevel }}
            {{- if .Values.agent.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.agent.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.agent.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.agent.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.agent.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.agent.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- if .Values.agent.resources }}
          resources: {{- toYaml .Values.agent.resources | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.agent.containerPorts.http }}
            {{- if .Values.agent.metrics.enabled }}
            - name: metrics
              containerPort: {{ .Values.agent.metrics.service.port }}
              protocol: TCP
            {{- end }}
          {{- if .Values.agent.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.agent.livenessProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /healthz
              port: http
              {{- if .Values.agent.tls.enabled }}
              scheme: HTTPS
              {{- end }}
          {{- else if .Values.agent.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.agent.customLivenessProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.agent.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.agent.readinessProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /healthz
              port: http
              {{- if .Values.agent.tls.enabled }}
              scheme: HTTPS
              {{- end }}
          {{- else if .Values.agent.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.agent.customReadinessProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.agent.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.agent.startupProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /healthz
              port: http
              {{- if .Values.agent.tls.enabled }}
              scheme: HTTPS
              {{- end }}
          {{- else if .Values.agent.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.agent.customStartupProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.agent.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.agent.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
            {{- if .Values.agent.tls.enabled }}
            - name: certs
              mountPath: /certs
              readOnly: true
            {{- end }}
          {{- if .Values.agent.extraVolumeMounts }}
          {{- include "common.tplvalues.render" (dict "value" .Values.agent.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
        {{- if .Values.agent.sidecars }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.agent.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        {{- if .Values.agent.tls.enabled }}
        - name: certs
          secret:
            secretName: {{ template "kubegems-local.agent.secretName" . }}
            defaultMode: 420
        {{- end }}
        {{- if .Values.agent.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.agent.extraVolumes "context" $) | nindent 8 }}
        {{- end }}