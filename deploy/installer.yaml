---
# Source: crds/plugins.kubegems.io_plugins.yaml

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.7.0
  creationTimestamp: null
  name: plugins.plugins.kubegems.io
spec:
  group: plugins.kubegems.io
  names:
    kind: Plugin
    listKind: PluginList
    plural: plugins
    singular: plugin
  scope: Namespaced
  versions:
  - name: v1beta1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              dependencies:
                items:
                  properties:
                    name:
                      type: string
                    namespace:
                      type: string
                    version:
                      type: string
                  type: object
                type: array
              enabled:
                type: boolean
              installNamespace:
                type: string
              kind:
                type: string
              values:
                type: object
                x-kubernetes-preserve-unknown-fields: true
              version:
                type: string
            type: object
          status:
            properties:
              creationTimestamp:
                format: date-time
                type: string
              deletionTimestamp:
                format: date-time
                type: string
              installNamespace:
                type: string
              message:
                type: string
              notes:
                type: string
              status:
                type: string
              upgradeTimestamp:
                format: date-time
                type: string
              values:
                type: object
                x-kubernetes-preserve-unknown-fields: true
              version:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
# Source: kubegems-installer/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubegems-installer
  namespace: "kubegems-installer"
  labels:
    app.kubernetes.io/name: kubegems-installer
    helm.sh/chart: kubegems-installer-0.1.0
    app.kubernetes.io/instance: kubegems-installer
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: installer
---
# Source: kubegems-installer/templates/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubegems-installer
  namespace: "kubegems-installer"
  labels:
    app.kubernetes.io/name: kubegems-installer
    helm.sh/chart: kubegems-installer-0.1.0
    app.kubernetes.io/instance: kubegems-installer
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: installer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: kubegems-installer
    namespace: kubegems-installer
---
# Source: kubegems-installer/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubegems-installer
  namespace: "kubegems-installer"
  labels:
    app.kubernetes.io/name: kubegems-installer
    helm.sh/chart: kubegems-installer-0.1.0
    app.kubernetes.io/instance: kubegems-installer
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: installer
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: kubegems-installer
      app.kubernetes.io/instance: kubegems-installer
      app.kubernetes.io/component: installer
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kubegems-installer
        helm.sh/chart: kubegems-installer-0.1.0
        app.kubernetes.io/instance: kubegems-installer
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: installer
    spec:
      serviceAccountName: kubegems-installer
      
      securityContext:
        fsGroup: 1001
      initContainers:
        - name: copy-plugins
          image: docker.io/kubegems/kubegems-plugin:latest
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          command:
            - sh
            - -c
            - cp -R /charts/* /app/charts/
            - cp -R /plugins/* /app/plugins/
          volumeMounts:
            - name: charts
              mountPath: /app/charts
            - name: plugins
              mountPath: /app/plugins
          resources:
            limits: {}
            requests: {}
      containers:
        - name: installer
          image: docker.io/kubegems/kubegems:latest
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          args:
            - installer
            - --chartsdir=/app/charts
            - --pluginsdir=/app/plugins
            - --enableleaderelection
            - --probeaddr=:8080
            - --metricsaddr=:9100
          env:
            - name: LOG_LEVEL
              value: debug
          resources:
            limits: {}
            requests: {}
          ports:
            - name: probe
              containerPort: 8080
              protocol: TCP
            - name: metrics
              containerPort: 9100
              protocol: TCP
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /healthz
              port: probe
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /healthz
              port: probe
          volumeMounts:
            - name: charts
              mountPath: /app/charts
            - name: plugins
              mountPath: /app/plugins
      volumes:
        - name: charts
          emptyDir: {}
        - name: plugins
          emptyDir: {}
