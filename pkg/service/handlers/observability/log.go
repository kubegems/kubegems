package observability

import (
	"context"
	"fmt"
	"math/rand"
	"strconv"
	"strings"
	"time"

	v1beta1 "github.com/banzaicloud/logging-operator/pkg/sdk/api/v1beta1"
	"github.com/banzaicloud/logging-operator/pkg/sdk/model/filter"
	"github.com/gin-gonic/gin"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"kubegems.io/pkg/apis/gems"
	"kubegems.io/pkg/service/handlers"
	"kubegems.io/pkg/utils"
	"kubegems.io/pkg/utils/agents"
	"kubegems.io/pkg/utils/prometheus"
	"kubegems.io/pkg/utils/slice"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
)

const (
	defaultGlobalOutput = "containers-console"
)

// NamespaceLogCollector namespace级日志采集器
// @Tags         Observability
// @Summary      namespace级日志采集器
// @Description  namespace级日志采集器
// @Accept       json
// @Produce      json
// @Param        cluster    path      string                                                       true  "cluster"
// @Param        namespace  path      string                                                       true  "namespace"
// @Param        enable     query     bool                                  true  "是否启用日志采集"
// @Success      200        {object}  handlers.ResponseStruct{Data=string}  "resp"
// @Router       /v1/observability/cluster/{cluster}/namespaces/{namespace}/logging [put]
// @Security     JWT
func (h *ObservabilityHandler) NamespaceLogCollector(c *gin.Context) {
	cluster := c.Param("cluster")
	namespace := c.Param("namespace")
	enable, _ := strconv.ParseBool(c.Query("enable"))

	if err := h.Execute(c.Request.Context(), cluster, func(ctx context.Context, cli agents.Client) error {
		defaultFlow := v1beta1.Flow{
			ObjectMeta: metav1.ObjectMeta{
				Namespace: namespace,
				Name:      "default",
			},
		}
		ns := corev1.Namespace{}
		if err := cli.Get(ctx, types.NamespacedName{Name: namespace}, &ns); err != nil {
			return err
		}
		if enable {
			_, err := controllerutil.CreateOrUpdate(ctx, cli, &defaultFlow, func() error {
				defaultFlow.Spec = v1beta1.FlowSpec{
					Filters: []v1beta1.Filter{
						{
							Prometheus: &filter.PrometheusConfig{
								Labels: filter.Label{
									"container": "$.kubernetes.container_name",
									"namespace": "$.kubernetes.namespace_name",
									"node":      "$.kubernetes.host",
									"pod":       "$.kubernetes.pod_name",
								},
								Metrics: []filter.MetricSection{
									{
										Name: "logging_entry_count",
										Type: "counter",
										Desc: "Total number of log entries generated by either application containers or system components",
									},
								},
							},
							RecordModifier: &filter.RecordModifier{
								Records: []filter.Record{
									{
										"throttle_group_key": "${record['kubernetes']['namespace_name']+record['kubernetes']['pod_name']}",
									},
								},
							},
							Throttle: &filter.Throttle{
								GroupKey:                 "throttle_group_key",
								GroupBucketLimit:         4000,
								GroupBucketPeriodSeconds: 10,
							},
						},
					},
					GlobalOutputRefs: []string{defaultGlobalOutput},
				}
				return nil
			})
			if err != nil {
				return err
			}
			if ns.Labels == nil {
				ns.Labels = make(map[string]string)
			}
			ns.Labels[gems.LabelLogCollector] = gems.StatusEnabled
		} else {
			if err := cli.Delete(ctx, &defaultFlow); err != nil {
				return err
			}
			delete(ns.Labels, gems.LabelLogCollector)
		}
		return cli.Update(ctx, &ns)
	}); err != nil {
		handlers.NotOK(c, err)
		return
	}

	handlers.OK(c, "ok")
}

var applables = []string{
	"app",                     // istio app label
	gems.LabelApplication,     // kubegems app label
	"apps.kubernetes.io/name", // k8s app label
}

type AppInfo struct {
	AppLabel    string `json:"appLabel"`
	CollectedBy string `json:"collectedBy"` // 由哪个flow采集的日志
}

// ListLogApps 获取支持日志采集的应用及标签
// @Tags         Observability
// @Summary      获取支持日志采集的应用及标签
// @Description  获取支持日志采集的应用及标签
// @Accept       json
// @Produce      json
// @Param        cluster    path      string                                            true  "cluster"
// @Param        namespace  path      string                                            true  "namespace"
// @Success      200        {object}  handlers.ResponseStruct{Data=map[string]AppInfo}  "resp"
// @Router       /v1/observability/cluster/{cluster}/namespaces/{namespace}/logging/apps [get]
// @Security     JWT
func (h *ObservabilityHandler) ListLogApps(c *gin.Context) {
	cluster := c.Param("cluster")
	namespace := c.Param("namespace")
	podList := corev1.PodList{}
	flowList := v1beta1.FlowList{}
	if err := h.Execute(c.Request.Context(), cluster, func(ctx context.Context, cli agents.Client) error {
		if err := cli.List(ctx, &podList, client.InNamespace(namespace)); err != nil {
			return err
		}
		return cli.List(ctx, &flowList, client.InNamespace(namespace))
	}); err != nil {
		handlers.NotOK(c, err)
		return
	}
	ret := getAppsLogStatus(podList, flowList)
	handlers.OK(c, ret)
}

type LogCollector struct {
	Apps           map[string]string `json:"apps"` // 要采集的应用, appname-applabel key-value
	Outputs        []string          `json:"outputs"`
	ClusterOutputs []string          `json:"clusterOutputs"`
	EnableMetrics  bool              `json:"enableMetrics"` // 是否启用日志采集监控
	PluginConfig   `json:"pluginConfig"`
}

type PluginConfig struct {
	Throttle        int      `json:"throttle"`        // 日志条目限速, 条/10s
	GeoIPLookupKeys []string `json:"geoIPLookupKeys"` // GeoIP keys
}

// AddAppLogCollector 应用级日志采集器
// @Tags         Observability
// @Summary      应用级日志采集器
// @Description  应用级日志采集器
// @Accept       json
// @Produce      json
// @Param        cluster    path      string                                                     true  "cluster"
// @Param        namespace  path      string                                                     true  "namespace"
// @Param        form       body      LogCollector                          true  "采集器内容"
// @Success      200        {object}  handlers.ResponseStruct{Data=string}  "resp"
// @Router       /v1/observability/cluster/{cluster}/namespaces/{namespace}/logging/apps [post]
// @Security     JWT
func (h *ObservabilityHandler) AddAppLogCollector(c *gin.Context) {
	cluster := c.Param("cluster")
	namespace := c.Param("namespace")
	req := LogCollector{}
	if err := c.BindJSON(&req); err != nil {
		handlers.NotOK(c, err)
		return
	}

	rand.Seed(time.Now().UnixNano())
	if err := h.Execute(c.Request.Context(), cluster, func(ctx context.Context, cli agents.Client) error {
		defaultFlow := v1beta1.Flow{
			ObjectMeta: metav1.ObjectMeta{
				Namespace: namespace,
				Name:      fmt.Sprintf("appflow-%s", string(utils.RandomRune(4, utils.RuneKindLower))),
			},
		}
		_, err := controllerutil.CreateOrUpdate(ctx, cli, &defaultFlow, func() error {
			defaultFlow.Spec.Filters = nil
			defaultFlow.Spec = v1beta1.FlowSpec{
				LocalOutputRefs:  req.Outputs,
				GlobalOutputRefs: req.ClusterOutputs,
			}
			if req.EnableMetrics {
				defaultFlow.Spec.Filters = append(defaultFlow.Spec.Filters, v1beta1.Filter{
					Prometheus: &filter.PrometheusConfig{
						Labels: filter.Label{
							"container": "$.kubernetes.container_name",
							"namespace": "$.kubernetes.namespace_name",
							"node":      "$.kubernetes.host",
							"pod":       "$.kubernetes.pod_name",
						},
						Metrics: []filter.MetricSection{
							{
								Name: "logging_entry_count",
								Type: "counter",
								Desc: "Total number of log entries generated by either application containers or system components",
							},
						},
					},
				})
			}
			if len(req.PluginConfig.GeoIPLookupKeys) > 0 {
				keys := strings.Join(req.GeoIPLookupKeys, ", ")
				defaultFlow.Spec.Filters = append(defaultFlow.Spec.Filters, v1beta1.Filter{
					GeoIP: &filter.GeoIP{
						GeoipLookupKeys: keys,
						Records: []filter.Record{
							{
								"city":         fmt.Sprintf(`${city.names.en["%s"]}`, keys),
								"latitude":     fmt.Sprintf(`${location.latitude["%s"]}`, keys),
								"longitude":    fmt.Sprintf(`${location.longitude["%s"]}`, keys),
								"country":      fmt.Sprintf(`${country.iso_code["%s"]}`, keys),
								"country_name": fmt.Sprintf(`${country.names.en["%s"]}`, keys),
								"postal_code":  fmt.Sprintf(`${postal.code["%s"]}`, keys),
							},
						},
					},
				})
			}
			if req.PluginConfig.Throttle > 0 {
				defaultFlow.Spec.Filters = append(defaultFlow.Spec.Filters, v1beta1.Filter{
					RecordModifier: &filter.RecordModifier{
						Records: []filter.Record{
							{
								"throttle_group_key": "${record['kubernetes']['namespace_name']+record['kubernetes']['pod_name']}",
							},
						},
					},
				})
				defaultFlow.Spec.Filters = append(defaultFlow.Spec.Filters, v1beta1.Filter{
					Throttle: &filter.Throttle{
						GroupKey:                 "throttle_group_key",
						GroupBucketLimit:         req.Throttle,
						GroupBucketPeriodSeconds: 10,
					},
				})
			}
			if len(req.Apps) == 0 {
				return fmt.Errorf("must specify at least one app")
			}

			podList := corev1.PodList{}
			flowList := v1beta1.FlowList{}
			if err := cli.List(ctx, &podList, client.InNamespace(namespace)); err != nil {
				return err
			}
			if err := cli.List(ctx, &flowList, client.InNamespace(namespace)); err != nil {
				return err
			}
			logstatus := getAppsLogStatus(podList, flowList)

			appnames := []string{}
			for appname, applabel := range req.Apps {
				if !slice.ContainStr(applables, applabel) {
					return fmt.Errorf("app label %s is not valid, must be one of %v", applabel, applables)
				}
				if status, ok := logstatus[appname]; ok {
					if status.CollectedBy != "" {
						return fmt.Errorf("app %s has been collected by flow %s", appname, status.CollectedBy)
					}
				}
				defaultFlow.Spec.Match = append(defaultFlow.Spec.Match, v1beta1.Match{
					Select: &v1beta1.Select{
						Labels: map[string]string{
							applabel: appname,
						},
					},
				})
				appnames = append(appnames, appname)
			}
			if defaultFlow.Labels == nil {
				defaultFlow.Labels = make(map[string]string)
			}
			defaultFlow.Labels[gems.LabelLogCollector] = strings.Join(appnames, ", ")
			return nil
		})
		return err
	}); err != nil {
		handlers.NotOK(c, err)
		return
	}

	handlers.OK(c, "ok")
}

func getAppsLogStatus(podList corev1.PodList, flowList v1beta1.FlowList) map[string]*AppInfo {
	ret := map[string]*AppInfo{}
	for _, pod := range podList.Items {
		if pod.Labels != nil {
			for _, applabel := range applables {
				if appname, ok := pod.Labels[applabel]; ok {
					ret[appname] = &AppInfo{AppLabel: applabel}
					break
				}
			}
		}
	}
	for _, flow := range flowList.Items {
		for _, selector := range flow.Spec.Match {
			for _, appname := range selector.Select.Labels {
				if appinfo, ok := ret[appname]; ok {
					appinfo.CollectedBy = flow.Name
				}
			}
		}
	}
	return ret
}

// ListLoggingAlertRule 日志告警规则列表
// @Tags         Observability
// @Summary      日志告警规则列表
// @Description  日志告警规则列表
// @Accept       json
// @Produce      json
// @Param        cluster    path      string                                true  "cluster"
// @Param        namespace  path      string                                true  "namespace"
// @Success      200        {object}  handlers.ResponseStruct{Data=[]prometheus.LoggingAlertRule}  "resp"
// @Router       /v1/observability/cluster/{cluster}/namespaces/{namespace}/logging/alerts [get]
// @Security     JWT
func (h *ObservabilityHandler) ListLoggingAlertRule(c *gin.Context) {
	cluster := c.Param("cluster")
	namespace := c.Param("namespace")

	ret := []prometheus.LoggingAlertRule{}
	if err := h.Execute(c.Request.Context(), cluster, func(ctx context.Context, cli agents.Client) error {
		var err error
		ret, err = cli.Extend().ListLoggingAlertRules(ctx, namespace, false)
		return err
	}); err != nil {
		handlers.NotOK(c, err)
		return
	}
	handlers.OK(c, ret)
}

// GetLoggingAlertRule 日志告警规则详情
// @Tags         Observability
// @Summary      日志告警规则详情
// @Description  日志告警规则详情
// @Accept       json
// @Produce      json
// @Param        cluster    path      string                                true  "cluster"
// @Param        namespace  path      string                                true  "namespace"
// @Param        name       path      string                                                     true  "name"
// @Success      200        {object}  handlers.ResponseStruct{Data=prometheus.LoggingAlertRule}  "resp"
// @Router       /v1/observability/cluster/{cluster}/namespaces/{namespace}/logging/alerts/{name} [get]
// @Security     JWT
func (h *ObservabilityHandler) GetLoggingAlertRule(c *gin.Context) {
	cluster := c.Param("cluster")
	namespace := c.Param("namespace")
	name := c.Param("name")

	alertrules := []prometheus.LoggingAlertRule{}
	if err := h.Execute(c.Request.Context(), cluster, func(ctx context.Context, cli agents.Client) error {
		var err error
		alertrules, err = cli.Extend().ListLoggingAlertRules(ctx, namespace, true)
		return err
	}); err != nil {
		handlers.NotOK(c, err)
		return
	}
	index := -1
	for i := range alertrules {
		if alertrules[i].Name == name {
			index = i
			break
		}
	}
	if index == -1 {
		handlers.NotOK(c, fmt.Errorf("alert %s not found", name))
	}
	handlers.OK(c, alertrules[index])
}

// CreateLoggingAlertRule 创建日志告警规则
// @Tags         Observability
// @Summary      创建日志告警规则
// @Description  创建日志告警规则
// @Accept       json
// @Produce      json
// @Param        cluster    path      string                                true  "cluster"
// @Param        namespace  path      string                                true  "namespace"
// @Param        form       body      prometheus.LoggingAlertRule           true  "body"
// @Success      200        {object}  handlers.ResponseStruct{Data=string}  "resp"
// @Router       /v1/observability/cluster/{cluster}/namespaces/{namespace}/logging/alerts [post]
// @Security     JWT
func (h *ObservabilityHandler) CreateLoggingAlertRule(c *gin.Context) {
	cluster := c.Param("cluster")
	namespace := c.Param("namespace")

	req := prometheus.LoggingAlertRule{}
	if err := c.BindJSON(&req); err != nil {
		handlers.NotOK(c, err)
		return
	}
	req.Namespace = namespace
	h.SetExtraAuditDataByClusterNamespace(c, cluster, namespace)
	h.SetAuditData(c, "创建", "日志告警规则", req.Name)

	h.m.Lock()
	defer h.m.Unlock()
	if err := h.Execute(c.Request.Context(), cluster, func(ctx context.Context, cli agents.Client) error {
		monitoropts := new(prometheus.MonitorOptions)
		h.DynamicConfig.Get(ctx, monitoropts)
		if err := req.CheckAndModify(monitoropts); err != nil {
			return err
		}
		raw, err := cli.Extend().GetRawLoggingAlertResource(ctx, namespace)
		if err != nil {
			return err
		}

		// check name duplicated in log alert
		monitorAMConfig, err := cli.Extend().GetOrCreateAlertmanagerConfig(ctx, namespace, prometheus.MonitorAlertmanagerConfigName)
		if err != nil {
			return err
		}
		if err := prometheus.CheckAlertNameInAMConfig(req.Name, monitorAMConfig, "监控"); err != nil {
			return err
		}

		if err := raw.ModifyLoggingAlertRule(req, prometheus.Add); err != nil {
			return err
		}
		return cli.Extend().CommitRawLoggingAlertResource(ctx, raw)
	}); err != nil {
		handlers.NotOK(c, err)
		return
	}
	handlers.OK(c, "ok")
}

// CreateLoggingAlertRule 更新日志告警规则
// @Tags         Observability
// @Summary      更新日志告警规则
// @Description  更新日志告警规则
// @Accept       json
// @Produce      json
// @Param        cluster    path      string                                true  "cluster"
// @Param        namespace  path      string                                true  "namespace"
// @Param        form       body      prometheus.LoggingAlertRule           true  "body"
// @Success      200        {object}  handlers.ResponseStruct{Data=string}  "resp"
// @Router       /v1/observability/cluster/{cluster}/namespaces/{namespace}/logging/alerts/{name} [put]
// @Security     JWT
func (h *ObservabilityHandler) UpdateLoggingAlertRule(c *gin.Context) {
	cluster := c.Param("cluster")
	namespace := c.Param("namespace")

	req := prometheus.LoggingAlertRule{}
	if err := c.BindJSON(&req); err != nil {
		handlers.NotOK(c, err)
		return
	}
	req.Namespace = namespace
	h.SetExtraAuditDataByClusterNamespace(c, cluster, namespace)
	h.SetAuditData(c, "更新", "日志告警规则", req.Name)

	h.m.Lock()
	defer h.m.Unlock()
	if err := h.Execute(c.Request.Context(), cluster, func(ctx context.Context, cli agents.Client) error {
		monitoropts := new(prometheus.MonitorOptions)
		h.DynamicConfig.Get(ctx, monitoropts)
		if err := req.CheckAndModify(monitoropts); err != nil {
			return err
		}
		raw, err := cli.Extend().GetRawLoggingAlertResource(ctx, namespace)
		if err != nil {
			return err
		}
		if err := raw.ModifyLoggingAlertRule(req, prometheus.Update); err != nil {
			return err
		}
		return cli.Extend().CommitRawLoggingAlertResource(ctx, raw)
	}); err != nil {
		handlers.NotOK(c, err)
		return
	}
	handlers.OK(c, "ok")
}

// DeleteLoggingAlertRule 删除日志告警规则
// @Tags         Observability
// @Summary      删除日志告警规则
// @Description  删除日志告警规则
// @Accept       json
// @Produce      json
// @Param        cluster    path      string                                true  "cluster"
// @Param        namespace  path      string                                true  "namespace"
// @Param        name       path      string                                true  "name"
// @Success      200        {object}  handlers.ResponseStruct{Data=string}  "resp"
// @Router       /v1/observability/cluster/{cluster}/namespaces/{namespace}/logging/alerts/{name} [delete]
// @Security     JWT
func (h *ObservabilityHandler) DeleteLoggingAlertRule(c *gin.Context) {
	cluster := c.Param("cluster")
	namespace := c.Param("namespace")
	name := c.Param("name")

	h.SetExtraAuditDataByClusterNamespace(c, cluster, namespace)
	h.SetAuditData(c, "删除", "日志告警规则", name)
	req := prometheus.LoggingAlertRule{
		BaseAlertRule: prometheus.BaseAlertRule{
			Namespace: namespace,
			Name:      name,
		},
	}
	h.m.Lock()
	defer h.m.Unlock()
	if err := h.Execute(c.Request.Context(), cluster, func(ctx context.Context, cli agents.Client) error {
		raw, err := cli.Extend().GetRawLoggingAlertResource(ctx, namespace)
		if err != nil {
			return err
		}
		if err := raw.ModifyLoggingAlertRule(req, prometheus.Delete); err != nil {
			return err
		}
		if err := cli.Extend().CommitRawLoggingAlertResource(ctx, raw); err != nil {
			return err
		}
		return deleteSilenceIfExist(ctx, namespace, name, cli)
	}); err != nil {
		handlers.NotOK(c, err)
		return
	}
	handlers.OK(c, "ok")
}
