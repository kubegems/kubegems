// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package kubeclient

import (
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"time"

	"github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1alpha1"
	"github.com/prometheus/alertmanager/pkg/labels"
	alerttypes "github.com/prometheus/alertmanager/types"
	"github.com/prometheus/common/model"
	"kubegems.io/pkg/log"
	"kubegems.io/pkg/utils/prometheus"
)

var (
	alertmanagerconfigGVKi = v1alpha1.SchemeGroupVersion.WithKind("AlertmanagerConfig")
	alertmanagerconfigGVK  = &alertmanagerconfigGVKi
)

func (k KubeClient) GetAlertmanagerConfig(cluster, namespace, name string, labels map[string]string) (*v1alpha1.AlertmanagerConfig, error) {
	agentClient, err := k.GetAgentClient(cluster)
	if err != nil {
		return nil, err
	}
	obj := &v1alpha1.AlertmanagerConfig{}
	err = agentClient.GetObject(alertmanagerconfigGVK, obj, &namespace, &name)
	return obj, err
}

func (k KubeClient) GetAlertmanagerConfigList(cluster, namespace string, labelSet map[string]string) (*[]*v1alpha1.AlertmanagerConfig, error) {
	agentClient, err := k.GetAgentClient(cluster)
	if err != nil {
		return nil, err
	}
	list := []*v1alpha1.AlertmanagerConfig{}
	err = agentClient.GetObjectList(alertmanagerconfigGVK, &list, &namespace, labelSet)
	return &list, err
}

func (k KubeClient) DeleteAlertmanagerConfig(cluster, namespace, name string) error {
	agentClient, err := k.GetAgentClient(cluster)
	if err != nil {
		return err
	}
	return agentClient.DeleteObject(alertmanagerconfigGVK, &namespace, &name)
}

func (k KubeClient) CreateAlertmanagerConfig(cluster, namespace, name string, data *v1alpha1.AlertmanagerConfig) (*v1alpha1.AlertmanagerConfig, error) {
	agentClient, err := k.GetAgentClient(cluster)
	if err != nil {
		return nil, err
	}
	data.SetName(name)
	data.SetNamespace(namespace)

	if err := k.CheckAlertmanagerConfig(cluster, data); err != nil {
		log.Errorf("check all alertmanager config: %v", err)
		return data, err
	}
	err = agentClient.CreateObject(alertmanagerconfigGVK, data, &namespace, &name)
	return data, err
}

func (k KubeClient) UpdateAlertmanagerConfig(cluster string, data *v1alpha1.AlertmanagerConfig) (*v1alpha1.AlertmanagerConfig, error) {
	agentClient, err := k.GetAgentClient(cluster)
	if err != nil {
		return nil, err
	}

	if err := k.CheckAlertmanagerConfig(cluster, data); err != nil {
		log.Errorf("check alertmanager config failed: %v", err)
		return data, err
	}
	ns := data.GetNamespace()
	name := data.GetName()
	err = agentClient.UpdateObject(alertmanagerconfigGVK, data, &ns, &name)
	return data, err
}

func (k KubeClient) CheckAlertmanagerConfig(cluster string, data *v1alpha1.AlertmanagerConfig) error {
	return k.DoRequest(http.MethodPost, cluster, "/custom/alertmanager/v1/alerts/_/actions/check", data, nil)
}

func (k KubeClient) ListSilences(cluster, namespace string) ([]*alerttypes.Silence, error) {
	url := "/custom/alertmanager/v1/silence"
	if namespace != "" {
		url = fmt.Sprintf(`%s?filter=%s="%s"`, url, prometheus.AlertNamespaceLabel, namespace)
	}
	silences := []*alerttypes.Silence{}
	if err := k.DoRequest(http.MethodGet, cluster, url, nil, &silences); err != nil {
		return nil, err
	}

	// 只返回活跃的
	var ret []*alerttypes.Silence
	for _, v := range silences {
		if v.Status.State == alerttypes.SilenceStateActive {
			ret = append(ret, v)
		}
	}

	return ret, nil
}

func (k KubeClient) GetSilence(cluster, namespace, alertName string) (*alerttypes.Silence, error) {
	// 只有一个filter生效
	url := "/custom/alertmanager/v1/silence"
	if namespace != "" {
		url = fmt.Sprintf(`%s?%s="%s"`, url, prometheus.AlertNamespaceLabel, namespace)
	}
	silences := []*alerttypes.Silence{}
	if err := k.DoRequest(http.MethodGet, cluster, url, nil, &silences); err != nil {
		return nil, err
	}

	// 只返回活跃的
	actives := []*alerttypes.Silence{}
	for _, silence := range silences {
		if silence.Status.State == alerttypes.SilenceStateActive &&
			silence.Matchers.Matches(model.LabelSet{
				prometheus.AlertNamespaceLabel: model.LabelValue(namespace),
				prometheus.AlertNameLabel:      model.LabelValue(alertName),
			}) { // 名称匹配
			actives = append(actives, silence)
		}
	}
	if len(actives) == 0 {
		return nil, nil
	}
	if len(actives) > 1 {
		return nil, errors.New("too many silences")
	}

	return actives[0], nil
}

func (k KubeClient) CreateSilenceIfNotExist(cluster, namespace, alertName string) error {
	silence, err := k.GetSilence(cluster, namespace, alertName)
	if err != nil {
		return err
	}
	// 不存在，创建
	if silence == nil {
		silence = &alerttypes.Silence{
			Comment:   fmt.Sprintf("silence for %s", alertName),
			CreatedBy: alertName,
			Matchers: labels.Matchers{
				&labels.Matcher{
					Type:  labels.MatchEqual,
					Name:  prometheus.AlertNamespaceLabel,
					Value: namespace,
				},
				&labels.Matcher{
					Type:  labels.MatchEqual,
					Name:  prometheus.AlertNameLabel,
					Value: alertName,
				},
			},
			StartsAt: time.Now(),
			EndsAt:   time.Now().AddDate(1000, 0, 0), // 100年
		}
		return k.DoRequest(http.MethodPost, cluster, "/custom/alertmanager/v1/silence/_/actions/create", silence, nil)
	}
	return nil
}

func (k KubeClient) DeleteSilenceIfExist(cluster, namespace, alertName string) error {
	silence, err := k.GetSilence(cluster, namespace, alertName)
	if err != nil {
		return err
	}
	// 存在，删除
	if silence != nil {
		values := url.Values{}
		values.Add("id", silence.ID)
		return k.DoRequest(http.MethodDelete, cluster, fmt.Sprintf("/custom/alertmanager/v1/silence/_/actions/delete?%s", values.Encode()), nil, nil)
	}
	return nil
}
