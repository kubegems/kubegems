package observability

import (
	"context"
	"strconv"

	v1beta1 "github.com/banzaicloud/logging-operator/pkg/sdk/api/v1beta1"
	"github.com/banzaicloud/logging-operator/pkg/sdk/model/filter"
	"github.com/gin-gonic/gin"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"kubegems.io/pkg/apis/gems"
	"kubegems.io/pkg/service/handlers"
	"kubegems.io/pkg/utils/agents"
	"sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
)

type LogCollector struct {
	EnableNamespace bool     // 一键开启namespace所有应用采集
	Apps            []string `json:"apps"` // 要采集的应用
	Output          string
	ClusterOutput   string
	PluginConfig
}

type PluginConfig struct {
	Throttle        int      // 日志条目限速, 条/10s
	GeoIPLookupKeys []string // GeoIP keys
}

const (
	defaultGlobalOutput = "containers-console"
)

// NamespaceLogCollector namespace级日志采集器
// @Tags         Observability
// @Summary      namespace级日志采集器
// @Description  namespace级日志采集器
// @Accept       json
// @Produce      json
// @Param        cluster    path      string                                true  "cluster"
// @Param        namespace  path      string                                true  "namespace"
// @Param        enable       query      bool               true  "是否启用日志采集"
// @Success      200        {object}  handlers.ResponseStruct{Data=string}  "resp"
// @Router       /v1/observability/cluster/{cluster}/namespaces/{namespace}/logging [put]
// @Security     JWT
func (h *ObservabilityHandler) NamespaceLogCollector(c *gin.Context) {
	cluster := c.Param("cluster")
	namespace := c.Param("namespace")
	enable, _ := strconv.ParseBool(c.Query("enable"))

	if err := h.Execute(c.Request.Context(), cluster, func(ctx context.Context, cli agents.Client) error {
		defaultFlow := v1beta1.Flow{
			ObjectMeta: metav1.ObjectMeta{
				Namespace: namespace,
				Name:      "default",
			},
		}
		ns := corev1.Namespace{}
		if err := cli.Get(ctx, types.NamespacedName{Name: namespace}, &ns); err != nil {
			return err
		}
		if enable {
			_, err := controllerutil.CreateOrUpdate(ctx, cli, &defaultFlow, func() error {
				defaultFlow.Spec = v1beta1.FlowSpec{
					Filters: []v1beta1.Filter{
						{
							Prometheus: &filter.PrometheusConfig{
								Labels: filter.Label{
									"container": "$.kubernetes.container_name",
									"namespace": "$.kubernetes.namespace_name",
									"node":      "$.kubernetes.host",
									"pod":       "$.kubernetes.pod_name",
								},
								Metrics: []filter.MetricSection{
									{
										Name: "logging_entry_count",
										Type: "counter",
										Desc: "Total number of log entries generated by either application containers or system components",
									},
								},
							},
							RecordModifier: &filter.RecordModifier{
								Records: []filter.Record{
									{
										"throttle_group_key": "${record['kubernetes']['namespace_name']+record['kubernetes']['pod_name']}",
									},
								},
							},
							Throttle: &filter.Throttle{
								GroupKey:                 "throttle_group_key",
								GroupBucketLimit:         4000,
								GroupBucketPeriodSeconds: 10,
							},
						},
					},
					GlobalOutputRefs: []string{defaultGlobalOutput},
				}
				return nil
			})
			if err != nil {
				return err
			}
			if ns.Labels == nil {
				ns.Labels = make(map[string]string)
			}
			ns.Labels[gems.LabelLogCollector] = gems.StatusEnabled
		} else {
			if err := cli.Delete(ctx, &defaultFlow); err != nil {
				return err
			}
			delete(ns.Labels, gems.LabelLogCollector)
		}
		return cli.Update(ctx, &ns)
	}); err != nil {
		handlers.NotOK(c, err)
		return
	}

	handlers.OK(c, "ok")
}
